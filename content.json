{"meta":{"title":"Rayshell's blog","subtitle":"better atitude,better life!","description":"奋力学习前端的小菜鸟！","author":"Rayshell","url":"http://www.rayshell.work","root":"/"},"pages":[{"title":"tags","date":"2019-03-18T07:19:12.000Z","updated":"2019-03-18T07:19:48.861Z","comments":true,"path":"tags/index.html","permalink":"http://www.rayshell.work/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2019-03-18T07:56:03.000Z","updated":"2019-03-21T08:44:56.294Z","comments":true,"path":"about/index.html","permalink":"http://www.rayshell.work/about/index.html","excerpt":"","text":"关于我从事 WEB 开发，主要开发语言 HTML、CSS、bootstrap、JavaScript；有一定的代码洁癖。 对、前端、数据分析等技能有所了解。 热爱开源项目、热爱新技术、热爱新事物。 关于工作所在城市：上海 关于学习正在努力的奔向远方前进…近期学习方向：Vue.js、爬虫 关于座右铭 Tomorrow is another day.stay foolish，stay hungry. 关于爱好热爱运动，尤其喜爱唱歌、阅读、电影、旅行。 联系我 Blog: www.rayshell.work Email: 851548159@qq.com GitHub: Rayshell WeiBo: 盐萌怪 友情链接 Shuki 深度学习 图像处理 Vikeezan 前端 WEB开发"}],"posts":[{"title":"js相关笔记","slug":"js0327","date":"2019-03-27T01:30:40.000Z","updated":"2019-03-27T01:32:16.125Z","comments":true,"path":"2019/03/27/js0327/","link":"","permalink":"http://www.rayshell.work/2019/03/27/js0327/","excerpt":"","text":"some 方法定义和用法：some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。some() 方法会依次执行数组的每个元素：如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。注意：some() 不会对空数组进行检测。注意：some() 不会改变原始数组。1234//item是数组中正在处理的元素;i是数组中正在处理的元素的索引值some((item, i)=&gt;&#123;&#125; localstorage在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的。 优势解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小，相当于一个5M大小的针对于前端页面的数据库，这个在不同的浏览器中localStorage会有所不同。 局限 浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性 目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换 localStorage在浏览器的隐私模式下面是不可读取的 localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡 localStorage不能被爬虫抓取到 注意localStorage 中的键值对总是以字符串的形式存储。 (需要注意, 和js对象相比, 键值对总是以字符串的形式存储意味着数值类型会自动转化为字符串类型). 语法添加数据项目1localStorage.setItem(&apos;myCat&apos;, &apos;Tom&apos;); 读取数据项目1let cat = localStorage.getItem(&apos;myCat&apos;); 移除数据项目1localStorage.removeItem(&apos;myCat&apos;); 移除所有1localStorage.clear(); localStorage与sessionStorage的区别localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空 JSON.parse()和JSON.stringify()JSON.parse()从一个字符串中解析出json对象1var data=&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos; //解析对象JSON.parse(data) // 结果name:&quot;goatling&quot; JSON.stringify()从一个对象中解析出字符串12var data=&#123;name:&apos;goatling&apos;&#125;JSON.stringify(data) // 结果&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos; Array操作方法.splice()1arrayObject.splice(index,howmany,item1,.....,itemX) index 必需。规定添加/删除项目的位置howmany 必需。要删除的项目数量item1, …, itemX可选。向数组添加的新项目。 .pop() 方法用于删除并返回数组的最后一个元素。1arrayObject.pop() .unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。1arrayObject.unshift(item1,.....,itemX) item向数组添加的元素，第一个必填","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://www.rayshell.work/categories/学习笔记/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.rayshell.work/tags/JavaScript/"}],"author":"Rayshell"},{"title":"学习Vue.js的第一天","slug":"learnVue-1","date":"2019-03-22T01:38:50.000Z","updated":"2019-03-22T02:46:37.541Z","comments":true,"path":"2019/03/22/learnVue-1/","link":"","permalink":"http://www.rayshell.work/2019/03/22/learnVue-1/","excerpt":"","text":"今天是学习Vue.js的第一天，在老师的讲解下，感觉Vue.js是真的很有用，为前端程序员简化了太多工作了，真的是爱上了！ 这一节内容包括：MVC和MVVM的区别；Vue.js的基本语言；v-loak、v-text、v-html、v-bind、v-on使用；事件修饰符；v-model 双向数据绑定；Vue中内联样式的使用；v-for 和 key 的使用属性；v-if 和 v-show 的使用和特点。 MVC和MVVM的区别 Vue.js的基本语言1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;vue基本语法&lt;/title&gt; &lt;!--1、引用Vue框架--&gt; &lt;script src=\"https://unpkg.com/vue/dist/vue.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;!--不要给body加id=\"app\"--&gt;&lt;body&gt;&lt;!--将来new的Vue实例，会控制这个元素中的所有内容--&gt;&lt;!--Vue实例所控制的这个元素区域，就是我们的V--&gt; &lt;div id=\"app\"&gt; &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;script&gt; // 2、创建一个Vue实例 // 当我们导入包之后，在浏览器的内存中，就多了一个Vue构造函数 // 注意：我们new出来的这个vm对象，就是我们MVVM中的VM调度者 var vm = new Vue(&#123; el: '#app',//表示，当前这个new的这个实例额，就是我们要操作的区域 //这里的data就是MVVM中的M，专门用来保存每个页面的数据 data: &#123; msg: 'Hello Vue.js!'//通过Vue提供的指令，很方便的就能把数据渲染到页面上，程序员不在手动操作DOM元素了 &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; v-loak、v-text、v-html、v-bind、v-on使用 v-loak使用v-cloak可以解决插值表达式闪烁的问题； v-text默认v-text是没有闪烁问题的； v-text会覆盖元素中原本的内容，但是插值表达式只会替换自己的这个占位符，不会把整个元素的内容清空； v-html可以解析html标签，也会覆盖元素中原本的内容； v-blind是Vue中绑定属性的指令；可以写合法的JS表达式；可以简写为:； v-on是事件绑定机制，浏览器常见的事件都可以用v-on来绑定mouseon、click等；可以简写为@； 事件修饰符 .stop修饰符阻止了向上冒泡行为，冒泡行为是本身存在的； .prevent修饰符阻止了事件的默认行为； .capture修饰符触发捕获触发机制，先触发被捕获的 .self修饰符只有当前元素才触发； .once修饰符只触发一次 .self与.stop的不同点，.self只触发当前元素，阻止不了其他元素，.stop阻止了上级所有元素； 所有修饰符可以串联使用；`@click.prevent.once=”link”` v-model 双向数据绑定 v-bind只能实现数据的单向绑定M到V;&lt;input type=&quot;text&quot; v-bind:value=&quot;msg&quot;&gt; v-model能实现数据的双向绑定，M到V，V到M；&lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt; 注意：v-model只能运用到表单中：input(radio text address email) select CheckBox textarea Vue中使用样式Vue中class类的使用:class12345678910111213141516171819202122232425262728&lt;body&gt; &lt;div id=\"app\"&gt; &lt;!--直接使用class类--&gt; &lt;h1 class=\"italic thin\"&gt;这是也个很大的H1&lt;/h1&gt; &lt;!--Vue中class使用v-bind做数据绑定使用样式--&gt; &lt;!--第一种：直接传递一个数组--&gt; &lt;h1 :class=\"['italic', 'thin']\"&gt;这是也个很大的H1&lt;/h1&gt; &lt;!--第二种：在数组中使用三元表达式--&gt; &lt;h1 :class=\"['italic', 'thin', flag?'active':'']\"&gt;这是也个很大的H1&lt;/h1&gt; &lt;!--第三种：在数组中适用对象来代替三元表达式--&gt; &lt;h1 :class=\"['italic', 'thin', &#123;'active':flag&#125;]\"&gt;这是也个很大的H1&lt;/h1&gt; &lt;!--第四种：直接使用对象，对象的属性是类名，可以使用引号也可以不使用，属性的值是一个标识符--&gt; &lt;h1 :class=\"&#123;italic:true, red:true, active:flag&#125;\"&gt;这是也个很大的H1&lt;/h1&gt; &lt;!--可以将对象放入vm实例中，然后引用--&gt; &lt;h1 :class=\"classObj\"&gt;这是也个很大的H1&lt;/h1&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; flag: true, classObj: &#123;italic:true, red:true, active:'flag'&#125; &#125;, methods: &#123;&#125; &#125;); &lt;/script&gt;&lt;/body&gt; Vue中内联样式的使用:style123456789101112131415161718192021&lt;body&gt; &lt;div id=\"app\"&gt; &lt;!--对象就是无序的键值对集合--&gt; &lt;!--属性有-的需要用''括起来，font-size--&gt; &lt;h1 :style=\"&#123;color:'red', 'font-size': '28px'&#125;\"&gt;hello hello&lt;/h1&gt; &lt;h1 :style=\"styleObj\"&gt;hello hello&lt;/h1&gt; &lt;h1 :style=\"[styleObj, styleObj1]\"&gt;hello hello&lt;/h1&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue(&#123; el: '#app', data: &#123; styleObj: &#123;color:'green', 'font-size': '24px'&#125;, styleObj1: &#123;'font-style': 'italic'&#125;, &#125;, methods: &#123;&#125; &#125;); &lt;/script&gt;&lt;/body&gt; v-for 和 key 的使用属性v-for遍历123456789101112131415161718&lt;div id=\"app\"&gt; &lt;!--循环普通数组--&gt; &lt;p&gt;&#123;&#123; list[0] &#125;&#125;&lt;/p&gt; &lt;p v-for=\"item in list\"&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt; &lt;p v-for=\"(item,i) in list\"&gt;索引值为：&#123;&#123; i &#125;&#125; 内容为： &#123;&#123; item &#125;&#125;&lt;/p&gt; &lt;!--循环复杂数组--&gt; &lt;p v-for=\"(user in list2\"&gt;id为：&#123;&#123; user.id &#125;&#125; 用户名为： &#123;&#123; user.name &#125;&#125;&lt;/p&gt; &lt;p v-for=\"(user,i) in list2\"&gt;索引值为：&#123;&#123; i &#125;&#125; id为：&#123;&#123; user.id &#125;&#125; 用户名为： &#123;&#123; user.name &#125;&#125;&lt;/p&gt; &lt;!--遍历对象--&gt; &lt;p v-for=\"(val,key,i) in user\"&gt;索引值为：&#123;&#123; i &#125;&#125; 属性名为：&#123;&#123; key &#125;&#125; 属性值为： &#123;&#123; val &#125;&#125;&lt;/p&gt; &lt;!--迭代数字--&gt; &lt;!--in后面放普通数组，对象数组、对象，还可以是数字--&gt; &lt;!--使用v-for迭代数字，从1开始--&gt; &lt;p v-for=\"count in 10\"&gt;这是第&#123;&#123;count&#125;&#125;此循环&lt;/p&gt; &lt;/div&gt; key值的使用 注意v-for循环的时候，key的属性只能用number或是string； key在使用的时候，必须使用v-bind指令来绑定的形式，制定key的值 在组件中使用v-for循环的时候，或是在一些特殊情况中，如果使用v-for有问题，必须使用key值，key值指定为唯一的字符串/数字类型123&lt;p v-for=\"item in list\" :key=\"item.id\"&gt; &lt;input type=\"checkbox\"&gt;&#123;&#123;item.id&#125;&#125;--&#123;&#123;item.name&#125;&#125;&lt;/p&gt; v-if 和 v-show 的使用和特点1234567891011&lt;div id=\"app\"&gt; &lt;input type=\"button\" @click=\"flag=!flag\" value=\"切换\"&gt; &lt;!--v-if的特点是每次都会删除元素，创建元素--&gt; &lt;!--v-show不会进行对DOM元素的操作，只是将display：none样式--&gt; &lt;!--v-if 有较高的切换性能消耗--&gt; &lt;!--v-show 有较高的初始渲染消耗--&gt; &lt;!--如果频繁切换，最好不用v-if--&gt; &lt;!--如果元素可能永远也不可能被显示出来，则推荐v-if--&gt; &lt;h3 v-if=\"flag\"&gt;这是v-if控制的元素&lt;/h3&gt; &lt;h3 v-show=\"flag\"&gt;这是v-show控制的元素&lt;/h3&gt;&lt;/div&gt; 总结 MVC和MVVM的区别; 学习了Vue的基本代码结构; 插值表达式 v-cloak v-tex v-html v-bind(缩写:) v-on(缩写@) v-model v-for v-show; 事件修饰符 .stop .prevent`.capture.self.once` el指定要控制的区域;data是个对象，指定控制区域要用的数据;methods虽然带了个s后缀，但是是一个对象，这里可以自定义方法; 在vm实例中要访问data上的属性或是methods里的方法，必须带上this; 在使用v-for是学会使用key属性（只接受唯一的string/number）; v-model只能应用于表单元素; 在Vue绑定样式的两种方式：:clas :style;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://www.rayshell.work/categories/学习笔记/"}],"tags":[{"name":"Vue.js","slug":"Vue-js","permalink":"http://www.rayshell.work/tags/Vue-js/"}],"author":"Rayshell"},{"title":"开启博客之旅","slug":"hello-world","date":"2019-03-20T03:16:40.191Z","updated":"2019-03-20T03:16:40.192Z","comments":true,"path":"2019/03/20/hello-world/","link":"","permalink":"http://www.rayshell.work/2019/03/20/hello-world/","excerpt":"","text":"欢迎来到我的博客，这是我第一篇博客，我是一名正在努力学习前端的小白，在这里，我将记录我的学习，以及一些心情随笔，记录学习，记录生活，记录美好的一切！ hexo常使用的命令创建新文章1$ hexo new \"My New Post\" 更多详情 运行服务器1$ hexo server 更多详情 生成静态文件1$ hexo generate 更多详情 部署到远程1$ hexo deploy 更多详情","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://www.rayshell.work/categories/学习笔记/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.rayshell.work/tags/hexo/"}],"author":"Rayshell"},{"title":"面试经验总结","slug":"interview","date":"2019-03-19T09:28:56.000Z","updated":"2019-03-20T10:09:35.527Z","comments":true,"path":"2019/03/19/interview/","link":"","permalink":"http://www.rayshell.work/2019/03/19/interview/","excerpt":"","text":"从2019.3月初开始准备找实习，在此将记录我的面试经验，与君共勉。 国泰基金2019.03.05问题：1、自我介绍2、JS ES6简介3、js闭包、继承4、css相对定位、绝对定位5、使用express框架遇到的问题6、VUE简介7、git、GitHub管理工具 蚂蚁金服2019.03.161、自我介绍2、项目中自己所做的工作3、所修课程最好的课程4、学前端的初衷5、有自己做的网站，可以访问吗？6、CSS行内元素在块状元素中水平垂直居中，没设置高度7、队列和栈介绍8、数据库MySQL与mongodb的不同9、TCP与HTTP的不同，HTTP是什么？10、TCP的三次握手,为什么不是两次？","categories":[{"name":"随笔","slug":"随笔","permalink":"http://www.rayshell.work/categories/随笔/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://www.rayshell.work/tags/面试/"}],"author":"Rayshell"}]}